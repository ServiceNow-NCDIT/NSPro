<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_sonc_dit_nsw22_nsw2_provisioning_tasks</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_g_sonc_dit_nsw22_nsw2_provisioning_tasks">request_type=3^provisoning_stateCHANGESFROM1^provisoning_stateCHANGESTO2^EQ<item display_value="Change" endquery="false" field="request_type" goto="false" newquery="false" operator="=" or="false" value="3"/>
            <item display_value="Open" endquery="false" field="provisoning_state" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="1"/>
            <item display_value="Assigned" endquery="false" field="provisoning_state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="2"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>nsw2 set prov rcd def for change</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    // Add your code here
    var funcName = "nsw2: BR set prov rcd def for change: ";
    gs.info(funcName + "Called to action.");

    var nsw2util = new NcditNsw2Utils();

    // get the associated site record
    var siteGR = new GlideRecord("x_g_sonc_dit_nsw22_nsw2_sites");
    var gotSiteGR = siteGR.get(current.site_rcd_ref);
    if (gotSiteGR) {
        gs.info(funcName + "Setting fields from site record.");
        // set other fields
        current.site_id = siteGR.getValue('site_id');
        current.location = siteGR.getValue('location');
        current.due_date = current.req_date;
        current.req_demarc_loc = siteGR.getValue('telco_room'); // added 11/17/22 to populate addr for change
    } else {
        gs.error(funcName + "Failed to get site record for " + current.number);
    }

    // 11/17/22 get location record so we can add in the address info.
    var locGR = new GlideRecord("cmn_location");
    var gotLocGR = locGR.get(siteGR.getValue('location'));
    if (gotLocGR) {
        gs.info(funcName + "Setting addr fields from location record.");
        // need street, city, state, zip
        current.req_addr_street = locGR.getValue('street');
        current.req_addr_city = locGR.getValue('city');
        current.req_addr_state = locGR.getValue('state');
        current.req_addr_zip = locGR.getValue('zip');
    } else {
        gs.error(funcName + "Failed to get location record for " + current.number);
    }

    // anything else?
    // if this is a WAN service change, the get the current wan service and add note in the work notes.
    // request_type 1 = new, 2 = move, 3 = change, 4 = delete
    if (current.request_type == '3') {
        // get cpe infor for site
        var cpeResp = nsw2util.nsw2Util_getCpeInfoForSite(current.site_rcd_ref);

        // get circuit info for site
        var circuitResp = nsw2util.nsw2Util_getCircuitInfoForSite(current.site_rcd_ref);

        if (cpeResp.status == 'OK' && circuitResp.status == 'OK') {
            var wnStringWithHtml = "[code]" +
                "<h1>Site Information for " + current.site_rcd_ref.site_name + "</h1>" +
                "<h2>Site CPE Information</h2>" +
                cpeResp.message + "</br>" +
                "<p>" + JSON.stringify(cpeResp.cpeInfo) + "</p></br>" +
                "<h2>Site Circuit Information</h2>" +
                circuitResp.message + "</br>" +
                "<p>" + JSON.stringify(circuitResp.circuitInfo) + "</p></br>" +
                "[/code]";
            current.work_notes = wnStringWithHtml;
            gs.info(funcName + "CPE resp message = " + cpeResp.message);
        } else {
            gs.error(funcName + "nsw2 server side script to get cpe info for prov task " + current.number + " was called and returned " + cpeResp.status + " , " + cpeResp.message);
            gs.error(funcName + "nsw2 server side script to get circuit info for prov task " + current.number + " was called and returned " + circuitResp.status + " , " + circuitResp.message);
        }

        // 11/17/22 add for service change like speed change
        if (current.change_type == '3') {
            // Wan service change = 3, use req service code to set req speed, svc cat
            var svcGR = new GlideRecord("x_g_sonc_dit_nsw22_service_definitions");
            var svcSearchStr = "svc_code=" + current.requested_service_codes;
            svcGR.addEncodedQuery(svcSearchStr);
            gs.info(funcName + "Searching for svc rcd with " + svcSearchStr);
            svcGR.query();
            if (svcGR.next()) {
                gs.info(funcName + "Setting fields from req service codes.");
                // 11/17/22 set some provRcd items; req_network_service_category (1 Ent WAN, 2 Best Effort), speed
                if (svcGR.svc_type == "Enterprise WAN") {
                    current.req_network_service_category = '1';
                    current.requested_speed = svcGR.speed_egress;
                } else {
                    current.req_network_service_category = '2';
                }
            } else {
                gs.error(funcName + "Did not get svc record from req svc codes");
            }
        } else {
            gs.info(funcName + "Skipped setting fields from req service record. Not change_type = 3");
        }
    }

    current.update(); // 08/23/22 confirmed - this is needed to work.

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>rlwilliams11</sys_created_by>
        <sys_created_on>2022-08-16 19:26:35</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e32f45e61b9159106e32eaccac4bcb67</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>nsw2 set prov rcd def for change</sys_name>
        <sys_overrides/>
        <sys_package display_value="dit nsw22" source="x_g_sonc_dit_nsw22">d39e882e1ba038147294db1ee54bcb83</sys_package>
        <sys_policy/>
        <sys_scope display_value="dit nsw22">d39e882e1ba038147294db1ee54bcb83</sys_scope>
        <sys_update_name>sys_script_e32f45e61b9159106e32eaccac4bcb67</sys_update_name>
        <sys_updated_by>rlwilliams11</sys_updated_by>
        <sys_updated_on>2022-11-17 18:12:26</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e32f45e61b9159106e32eaccac4bcb67"/>
</record_update>
