<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_sonc_dit_nsw22_nsw2_provisioning_tasks</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_g_sonc_dit_nsw22_nsw2_provisioning_tasks">request_type=2^provisoning_stateCHANGESFROM1^provisoning_stateCHANGESTO2^EQ<item display_value="Move" endquery="false" field="request_type" goto="false" newquery="false" operator="=" or="false" value="2"/>
            <item display_value="Open" endquery="false" field="provisoning_state" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="1"/>
            <item display_value="Assigned" endquery="false" field="provisoning_state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="2"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>nsw2 set prov rcd def for move</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

	// Add your code here
	var funcName = "nsw2: BR set prov rcd def for move: ";
	gs.info(funcName + "Called to action.");

	var nsw2util = new NcditNsw2Utils();

	// get the associated site record
	var siteGR = new GlideRecord("x_g_sonc_dit_nsw22_nsw2_sites");
	var gotSiteGR = siteGR.get(current.site_rcd_ref);
	if (gotSiteGR) {
		gs.info(funcName + "Setting fields from site record.");
		// set other fields
		current.site_id = siteGR.getValue('site_id');
		current.location = siteGR.getValue('location');
		current.due_date = current.req_date;
	} else {
		gs.error(funcName + "Failed to get site record for " + current.number);
	}

	// set Assigned WAN service based on site record Service offerings in use
	var site_svcOffsInUseList = siteGR.getValue('service_offerings_in_use').split(',');
	gs.info(funcName + "Site service offering list = " + site_svcOffsInUseList.join(','));
	for (var ssoiuIndex = 0; ssoiuIndex < site_svcOffsInUseList.length; ssoiuIndex++) {
		// for each service off in use ref, find the wan service one and use it.
		var svcDefGR = new GlideRecord('x_g_sonc_dit_nsw22_service_definitions');
		if (svcDefGR.get(site_svcOffsInUseList[ssoiuIndex])) {
			// make sure service type has WAN in it.
			var thisSvcType = svcDefGR.getValue('svc_type');
			gs.info(funcName + "checking for WAN service type with " + thisSvcType);
			if (thisSvcType.match(/WAN/)) {
				current.assigned_wan_service = svcDefGR.getValue('sys_id');

				// 7/13/22 set some other things we will need when calling nsw2Util_selectPoPPEPort
				current.requested_speed = svcDefGR.getValue('speed_egress'); // this is for when nsw2Util_selectPoPPEPort gets called.
				// if svc_ha_category is Bronze, then req_network_service_category = 2 best effort, else 1 Guaranteed 
				if (svcDefGR.getValue('svc_ha_category') == "Bronze") {
					current.req_network_service_category = '2'; // best effort
				} else {
					current.req_network_service_category = '1'; // guaranteed
				}
				if (svcDefGR.getValue('svc_ha_category') == "Gold") {
					current.req_redundancy = true;
				}
				gs.info(funcName + "Found wan service for site = " + svcDefGR.getValue('svc_code'));
				break;
			}
		}
	}

	// get cpe infor for site
	var cpeResp = nsw2util.nsw2Util_getCpeInfoForSite(current.site_rcd_ref);

	// get circuit info for site
	var circuitResp = nsw2util.nsw2Util_getCircuitInfoForSite(current.site_rcd_ref);

	if (cpeResp.status == 'OK' && circuitResp.status == 'OK') {
		var wnStringWithHtml = "[code]" +
			"<h1>Site Information for " + current.site_rcd_ref.site_name + "</h1>" +
			"<h2>Site CPE Information</h2>" +
			cpeResp.message + "</br>" +
			"<p>" + JSON.stringify(cpeResp.cpeInfo) + "</p></br>" +
			"<h2>Site Circuit Information</h2>" +
			circuitResp.message + "</br>" +
			"<p>" + JSON.stringify(circuitResp.circuitInfo) + "</p></br>" +
			"[/code]";
		current.work_notes = wnStringWithHtml;
		gs.info(funcName + cpeResp.message);
	} else {
		gs.error(funcName + "nsw2 server side script to get cpe info for prov task " + current.number + " was called and returned " + cpeResp.status + " , " + cpeResp.message);
		gs.error(funcName + "nsw2 server side script to get circuit info for prov task " + current.number + " was called and returned " + circuitResp.status + " , " + circuitResp.message);
	}

	current.update(); // // 08/22/22 keep. runs when=after.

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>rlwilliams11</sys_created_by>
        <sys_created_on>2022-07-12 14:56:57</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ce61c0171b2459106e32eaccac4bcbe6</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>nsw2 set prov rcd def for move</sys_name>
        <sys_overrides/>
        <sys_package display_value="dit nsw22" source="x_g_sonc_dit_nsw22">d39e882e1ba038147294db1ee54bcb83</sys_package>
        <sys_policy/>
        <sys_scope display_value="dit nsw22">d39e882e1ba038147294db1ee54bcb83</sys_scope>
        <sys_update_name>sys_script_ce61c0171b2459106e32eaccac4bcbe6</sys_update_name>
        <sys_updated_by>rlwilliams11</sys_updated_by>
        <sys_updated_on>2022-08-23 17:43:20</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ce61c0171b2459106e32eaccac4bcbe6"/>
</record_update>
